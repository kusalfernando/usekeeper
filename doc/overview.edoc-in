@copyright 2019 SigScale Global Inc.
@version %VERSION%
@title UseKeeper  User's Guide
@doc This application implements Usage Management as a
<a target="_blank" rel="noopener noreferrer"
href="http://www.tmforum.org">TM Forum</a>
<a target="_blank" rel="noopener noreferrer"
href="http://www.tmforum.org/resources/reference/gb998-open-digital-architecture-oda-concepts-principles-r19-0-0/">ODA</a>
<a target="_blank" rel="noopener noreferrer"
href="http://www.tmforum.org/resources/exploratory-report/ig1171-oda-component-definition-r19-0-0/">Component</a>.

==Introduction==
UseKeeper manages a collection of product, service or resource usage records.

A usage represents an event that is of interest to billing systems and may
have charges applied to it. It is comprised of characteristics, which define
all attributes known for a particular type of usage.  Main usage attributes
are its identifier, date, type, type related specification, characteristics
(name and value), status, related parties and rating related information
(date, amount, taxes, etc.).

The Usage collection is efficiently stored as a chronologically ordered
{@link //kernel/disk_log. disk_log}. The log is sharded and time range
queries very efficiently locate the shard with the starting record. Records
are efficiently filtered using Match Specifications
({@link //stdlib/ets:match_spec(). match_spec()}) allowing flexible queries
over very large datasets with reasonable performance.

The Usage Specification collection provides definitions of the characteristics
and possible values supported by certain types of Usage. These allow for
structured data storage and may be used to guide the creation of complex
Usage queries.

==Installation==
Before starting the application for the first time,
{@link //mnesia/mnesia. mnesia} should be initialized. Create a schema
and start mnesia on all nodes where the {@link //usekeeper. usekeeper}
application will run.

The following command will initialize {@link //usekeeper. usekeeper}
on the current node and create a default REST user "admin" with password
"admin".

e.g &#058;
 	```
	(usekeeper@h)1> usekeeper_app:install().
	{ok, [httpd_group, httpd_user, use_spec]}
	'''

===HTTP Authentication===
To use the {@link //inets/mod_auth. mod_auth} module for authentication
you should create necessary users in the {@link //mnesia/mnesia. mnesia}
tables it uses. All users will be added to groups specified in `require_group'
option in {@link //inets. inets} {@link //inets/httpd. httpd} confifuration.
e.g &#058;
	```
	(usekeeper@h)2> usekeeper:add_user("bss", "nfc9xgp32xha").
	{ok, {1573881567036, {1573881567036,157}}
	'''

==Operation==

==REST API==
The {@link //usekeeper. usekeeper} application supports the following
<a target="_blank" rel="noopener noreferrer"
href="https://www.tmforum.org/open-apis/">TM Forum Open APIs</a>:

<p><table id="mt">
   <thead>
      <tr id="mt">
         <th id="mt">Document Number</th>
         <th id="mt">TM Forum Open API</th>
      </tr>
   </thead>
   <tbody>
      <tr id="mt">
         <td id="mt"><a target="_blank" rel="noopener noreferrer" href="https://www.tmforum.org/resources/interface/tmf635-usage-management-api-rest-specification-r14-5-0/">TMF635</a></td>
         <td id="mt">Usage Management</td>
      </tr>
      <tr id="mt">
         <td id="mt"><a target="_blank" rel="noopener noreferrer" href="https://www.tmforum.org/resources/specification/tmf632-party-management-api-rest-specification-r19-0-0/">TMF632</a></td>
         <td id="mt">Party Management</td>
      </tr>
   </tbody>
</table></p>

===Resource &amp; Operations===
The resources, their URIs, the methods available on them and expected
responses, are described in this section.  Only the headers, and responses,
relevant to the function being described are included.  Any valid HTTP
headers may be included in requests and responses.

<p><table>
   <caption class="op"><b>Operations</b></caption>
   <tbody>
      <tr>
         <td><a href="#Create-User">Create a User</a></td>
      </tr>
      <tr>
         <td><a href="#Retrieve-User">Retrieve a User</a></td>
      </tr>
      <tr>
         <td><a href="#Retrieve-Users">Retrieve all Users</a></td>
      </tr>
      <tr>
         <td><a href="#Query-Users">Retrieve User by Name</a></td>
      </tr>
      <tr>
         <td><a href="#Retrieve-Specs">Retrieve all Usage Specifications</a></td>
      </tr>
   </tbody>
</table></p>

<table id="Create-User" class="op">
   <caption class="op"><b>Create a User</b></caption>
   <tr class="op">
      <td id="opl">Resource URI</td>
      <td id="opr">/partyManagement/v4/individual</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Method</td>
      <td id="opr">POST</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Headers</td>
      <td id="opr">Content-Type, Accept</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Message Body</td>
      <td id="opr">Representation of an Individual</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Headers</td>
      <td id="opr">Content-Type, Content-Length, Etag, Location</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Body</td>
      <td id="opr">Representation of an Individual</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Status</td>
      <td id="opr">201</td>
   </tr>
</table>
<p>Example request:<pre>
POST /partyManagement/v4/individual
Content-Type: application/json
Accept: application/json

{
   "givenName": "John",
   "lastName": "Smith",
   "characteristic": [
      {
         "name": "username",
         "value": "johns"
      },
      {
         "name": "password",
         "value": "9654edfg"
      }
   ]
}
</pre></p>
<p>Example response:<pre>
HTTP/1.1 201 OK
Content-Type: application/json
ETag: 1573881568128-91
Location: /partyManagement/v4/individual/157388156812891

{
   "id": "157388156812891",
   "href": "/partyManagement/v4/individual/157388156812891",
   "@type": "Individual",
   "givenName": "John",
   "lastName": "Smith",
   "characteristic": [
      {
         "name": "username",
         "value": "johns"
      },
      {
         "name": "password",
         "value": "9654edfg"
      }
   ]
}
</pre></p>


<table id="Retrieve-User" class="op">
   <caption class="op"><b>Retrieve a User</b></caption>
   <tr class="op">
      <td id="opl">Resource URI</td>
      <td id="opr">/partyManagement/v4/individual/{id}</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Method</td>
      <td id="opr">GET</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Headers</td>
      <td id="opr">Accept</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Message Body</td>
      <td id="opr">none</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Headers</td>
      <td id="opr">Content-Type, Content-Length, Etag</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Body</td>
      <td id="opr">Representation of an Individual</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Status</td>
      <td id="opr">200</td>
   </tr>
</table>
<p>Example request:<pre>
GET /partyManagement/v4/individual/15738815676174
Accept: application/json
</pre></p>
<p>Example response:<pre>
HTTP/1.1 200 OK
Content-Type: application/json
ETag: 1573881568012-45

{
   "id": "15738815676174",
   "href": "/partyManagement/v4/individual/15738815676174",
   "@type": "Individual",
   "characteristic": [
      {
         "name": "username",
         "value": "admin"
      },
      {
         "name": "password",
         "value": "admin"
      }
   ]
}
</pre></p>

<table id="Retrieve-Users" class="op">
   <caption class="op"><b>Retrieve all Users</b></caption>
   <tr class="op">
      <td id="opl">Resource URI</td>
      <td id="opr">/partyManagement/v4/individual</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Method</td>
      <td id="opr">GET</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Headers</td>
      <td id="opr">Accept</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Message Body</td>
      <td id="opr">none</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Headers</td>
      <td id="opr">Content-Type, Content-Length, Etag</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Body</td>
      <td id="opr">Representation of Individual collection</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Status</td>
      <td id="opr">200</td>
   </tr>
</table>
<p>Example request:<pre>
GET /partyManagement/v4/individual
Accept: application/json
</pre></p>
<p>Example response:<pre>
HTTP/1.1 200 OK
Content-Type: application/json
ETag: 1573881569461-112

[
   {
      "id": "15738815676174",
      "href": "/partyManagement/v4/individual/15738815676174",
      "@type": "Individual",
      "characteristic": [
         {
            "name": "username",
            "value": "admin"
         },
         {
            "name": "password",
            "value": "admin"
         }
      ]
   },
   {
      "id": "157388156812891",
      "href": "/partyManagement/v4/individual/157388156812891",
      "@type": "Individual",
      "givenName": "John",
      "lastName": "Smith",
      "characteristic": [
         {
            "name": "username",
            "value": "johns"
         },
         {
            "name": "password",
            "value": "9654edfg"
         }
      ]
   }
]
</pre></p>

<table id="Query-Users" class="op">
   <caption class="op"><b>Query Users by Name</b></caption>
   <tr class="op">
      <td id="opl">Resource URI</td>
      <td id="opr">/partyManagement/v4/individual?givenName={givenName}</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Method</td>
      <td id="opr">GET</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Headers</td>
      <td id="opr">Accept</td>
   </tr>
   <tr class="op">
      <td id="opl">Request Message Body</td>
      <td id="opr">none</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Headers</td>
      <td id="opr">Content-Type, Content-Length, Etag</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Body</td>
      <td id="opr">Representation of an Individual</td>
   </tr>
   <tr class="op">
      <td id="opl">Response Status</td>
      <td id="opr">200</td>
   </tr>
</table>
<p>Example request:<pre>
GET /partyManagement/v4/individual?givenName=John
Accept: application/json
</pre></p>
<p>Example response:<pre>
HTTP/1.1 200 OK
Content-Type: application/json
ETag: 1573881568128-91

[
   {
      "id": "157388156812891",
      "href": "/partyManagement/v4/individual/157388156812891",
      "@type": "Individual",
      "givenName": "John",
      "lastName": "Smith",
      "characteristic": [
         {
            "name": "username",
            "value": "johns"
         },
         {
            "name": "password",
            "value": "9654edfg"
         }
      ]
   }
]
</pre></p>

==Configuration==
The {@link //usekeeper. usekeeper} application is configured using the
following application environment variables ({@link //kernel/app. app}):
<dl>
	<dt>usage_log_dir</dt>
		<dd>Path of directory to store usage logs.</dd>
	<dt>usage_log_files</dt>
		<dd>Number of usage log files.</dd>
	<dt>usage_log_size</dt>
		<dd>Size in bytes of usage log files.</dd>
	<dt>rest_page_size</dt>
		<dd>Defines the maximum number of items to include in a REST collection response.</dd>
	<dt>ipdr_dir</dt>
		<dd>Path of directory to store IPDR files.</dd>
	<dt>export_dir</dt>
		<dd>Path of directory to store export files.</dd>
	<dt>hub_profile</dt>
		<dd>Name of {@link //inets/httpc. httpc} profile for notifications.</dd>
	<dt>hub_options</dt>
		<dd>Profile options for notifications.</dd>
</dl>

Default application environment variable values may be overidden in the
system {@link //jkernel/config. config} file (releases/%VERSION%/sys.config).
===Example sys.config===
```
[{usekeeper,
      [{usage_log_dir, "log/usage"},
      {usage_log_files, 100},
      {usage_log_size, 10485760},
      {rest_page_size, 1000}]},
{inets,
      [{services,
         [{httpd,
            [{server_name, "uk-1.usekeeper.org"},
            {directory_index, ["index.html"]},
            {directory, {"/",
                  [{auth_type, mnesia},
                  {auth_name, "usekeeper.org"},
                  {require_group, ["staff"]}]}},
            {transfer_disk_log, "log/http/transfer"},
            {security_disk_log, "log/http/security"},
            {error_disk_log, "log/http/error"},
            {transfer_disk_log_size, {10485760, 10}},
            {security_disk_log_size, {10485760, 10}},
            {error_disk_log_size, {10485760, 10}},
            {disk_log_format, internal},
            {modules, [mod_alias,
                  mod_auth,
                  mod_responsecontrol,
                  mod_usekeeper_rest_accepted_content,
                  mod_usekeeper_rest_get,
                  mod_usekeeper_rest_post,
                  mod_usekeeper_rest_patch,
                  mod_usekeeper_rest_delete,
                  mod_usekeeper_rest_patch,
                  mod_get,
						mod_disk_log]},
            {port, 8080},
            {socket_type, ip_comm},
%           {socket_type, {essl,
%                 [{certfile,  "ssl/certs/ocs.pem"},
%                 {keyfile, "ssl/private/ocs.pem"}]}},
            {server_root, "./"},
            {alias, {"/doc", "lib/usekeeper-%VERSION%/doc"}},
            {document_root, "lib/usekeeper-%VERSION%/priv/www"}]}]}]}].
'''

